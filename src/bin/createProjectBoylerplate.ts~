import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { ProjectData } from './index.js';

export type FileContentReplacement = {
    path: string,
    searchValue: string,
    replaceValue: string
}

export function copyDirectoryWithReplacement(source: string, destination: string, fileContentReplacements: FileContentReplacement[]) {
    fs.mkdirSync(destination, { recursive: true });

    const entries = fs.readdirSync(source, { withFileTypes: true });

    for (const entry of entries) {

        const srcPath = path.join(source, entry.name);
        const destPath = path.join(destination, entry.name);


        if (entry.isDirectory()) {
            copyDirectoryWithReplacement(srcPath, destPath, fileContentReplacements);
        } else {
            let content = fs.readFileSync(srcPath, 'utf8');

            fileContentReplacements.forEach(replacement => {
                if (srcPath.endsWith(replacement.path)) {
                    content = content.replace(new RegExp(replacement.searchValue, 'g'), replacement.replaceValue);
                }
            });

            fs.writeFileSync(destPath, content);
        }
    }
}

export function createProjectBoylerplate(projectData: ProjectData) {

    const replacements: FileContentReplacement[] = [
        {
            path: 'src/index.html',
            searchValue: 'NativeJS - App',
            replaceValue: `NativeJS - ${projectData.name}`
        },
        {
            path: 'package.json',
            searchValue: '"name": "app-project"',
            replaceValue: `"name": "${projectData.name}"`
        }
    ];

    const __filename = fileURLToPath(import.meta.url);
    const __dirname = path.dirname(__filename);

    const boilerPlateFolder = path.join(__dirname, 'quickstart_app');
    copyDirectoryWithReplacement(boilerPlateFolder, projectData.projectPath, replacements);
}