import { RefContext } from '@/lib/dom/ref/RefContext.ts';
import { RefFunction } from '@/lib/types';


export function ref<T>(initialValue: T, name: string): RefFunction<T> {
  console.log(this);

  function ref() {
    return name;
  }

  const refContext = RefContext.getInstance<T>();

  if (!refContext.has(name)) {
    refContext.set(name, { current: initialValue });
  }
  Object.defineProperty(ref, 'current', {
    get() {
      return refContext.get(name)!.current;
    },
    set(value) {
      const existingRef = refContext.get(name);

      if (existingRef) {
        existingRef.current = value;
      }
    },
  });

  return ref as RefFunction<T>;
}

export function clearRefs() {
  RefContext.getInstance().clear();
}